@page "/"
@rendermode InteractiveServer
@using System.Collections.Concurrent
@using System.Text.Json
@* This is the client *@
<div class="p-4">
    <h1 class="text-2xl font-bold mb-4">Raft Web Client</h1>
    <p class="mb-6">Welcome to your Raft Cluster Manager!</p>

    <div class="grid gap-4">
        @foreach (var entry in data)
        {
            <div>
                <p>Nodes fetched: @data.Count</p>
            </div>

            <div class="border p-4 rounded-lg shadow-sm">
                <h2 class="text-xl font-semibold mb-2">Node @entry.Value.NodeId</h2>
                <div class="grid grid-cols-2 gap-2">
                    <div class="flex items-center">
                        <span class="font-medium mr-2">State:</span>
                        <span class="px-2 py-1 rounded-full text-sm
        @(entry.Value.State == NodeState.Follower ? "bg-gray-200" :
                entry.Value.State == NodeState.Candidate ? "bg-yellow-200" :
                "bg-green-200")">
                            @(entry.Value.State == NodeState.Follower ? "Follower" :
                                                    entry.Value.State == NodeState.Candidate ? "Candidate" :
                                                    "Leader")
                    </span>

                    </div>
                    <div>
                        <span class="font-medium">Term:</span> @entry.Value.Term
                    </div>
                    <div>
                        <span class="font-medium">Leader ID:</span>
                        @(string.IsNullOrEmpty(entry.Value.CurrentLeaderId) ? "None" : entry.Value.CurrentLeaderId)
                    </div>
                    <div>
                        <span class="font-medium">Commit Index:</span> @entry.Value.CommitIndex
                    </div>
                </div>

            @if (entry.Value.Log?.Any() == true)
                {
                    <div class="mt-4">
                        <h3 class="font-medium mb-2">Log Entries</h3>
                        <ul class="list-disc pl-5">
                            @foreach (var logEntry in entry.Value.Log)
                            {
                                <li>Index @logEntry.Index: @logEntry.Command</li>
                            }
                        </ul>
                    </div>
                }


                <div class="mt-4">
                    <input type="text" @bind="commandData[entry.Key]" class="border rounded px-2 py-1 mr-2"
                        placeholder="Enter command" />
                    <button @onclick="() => SendCommand(entry.Key)"
                        class="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">
                        Send Command
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    HttpClient http = new HttpClient();
    string[] Urls = Environment.GetEnvironmentVariable("URLS")?.Split(',') ?? Array.Empty<string>();
    ConcurrentDictionary<string, NodeData> data = new();
    Dictionary<string, string> commandData = new();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Initializing with URLs: {string.Join(", ", Urls)}");
        foreach (var url in Urls)
        {
            Console.WriteLine($"Setting up monitoring for {url}");
            commandData[url] = string.Empty;
            _ = UpdateNodeDataAsync(url);
        }
    }

    private async Task UpdateNodeDataAsync(string url)
    {
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };

        while (true)
        {
            try
            {
                Console.WriteLine($"Fetching data from {url}/nodeData");
                var response = await http.GetAsync($"{url}/nodeData");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Received data from {url}: {content}");
                    var nodeData = System.Text.Json.JsonSerializer.Deserialize<NodeData>(content, options);
                    if (nodeData != null)
                    {
                        data[url] = nodeData;
                        await InvokeAsync(StateHasChanged);
                    }
                }
                else
                {
                    Console.WriteLine($"Failed to fetch data from {url}: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching data from {url}: {ex.Message}");
            }
            await Task.Delay(5000);
        }
    }


    private async Task SendCommand(string url)
    {
        try
        {
            var command = commandData[url];
            var response = await http.PostAsJsonAsync($"{url}/request/command", new ClientCommandData { Command = command });
            var result = await response.Content.ReadFromJsonAsync<CommandResult>();

            if (result != null && result.Success)
            {
                Console.WriteLine($"Command succeeded: {result.Message}");
            }
            else
            {
                Console.WriteLine($"Command failed: {result?.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending command to {url}: {ex.Message}");
        }
    }

    public class NodeData
    {
        public string NodeId { get; set; }
        public NodeState State { get; set; }
        public int Term { get; set; }
        public string CurrentLeaderId { get; set; }
        public int CommitIndex { get; set; }
        public List<LogEntry> Log { get; set; } = new List<LogEntry>();
        public bool Paused { get; set; }
    }

    public enum NodeState
    {
        Follower,
        Candidate,
        Leader
    }

    public class ClientCommandData
    {
        public string Command { get; set; }
    }

    public class CommandResult
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public Dictionary<string, string> StateMachineState { get; set; }
    }

    public class LogEntry
    {
        public int Index { get; set; }
        public string Command { get; set; }
    }
}
